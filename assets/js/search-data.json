{
  
    
        "post0": {
            "title": "Probabilities Notes",
            "content": "Random Variables . Random variables are the variables that can take multiple values depending on the result of a random event. e.g. Throwing a dice, tossing a coin, height of a person, size of a rock, etc. . These can be Discrete: fixed number of values it can take, for example, tossing a coin can take only 2 values, heads or tails . or Continuous: any(infine) number of possible values, for example, size of a rock, could be as small as a bug or as large as the mount everest. . Probabilty Distribution . The probability of a random variable describes the probability of each possible result or outcome. In case of a coin toss the probability of both heads and tails is 1/2 so, the probability distribution is 1/2, 1/2. The PD always sums to 1. Higher probaility implies more likely . The probaility distribution of discrete random variable is called Probaility Mass Function | The PD of continuous random variable is called Probabilty Density Function | . import numpy as np import random import matplotlib.pyplot as plt # Probaility Mass Function of &quot;Throwing a Dice&quot; num_throws = 10000 outcomes = np.zeros(num_throws) discrete_outcomes = [1, 2, 3, 4, 5, 6] for i in range(num_throws): outcomes[i] = random.choice(discrete_outcomes) val, counts = np.unique(outcomes, return_counts=True) prob = counts / num_throws plt.bar(val, prob) plt.ylabel(&quot;Probability&quot;) plt.xlabel(&quot;Outcome&quot;) plt.show() plt.close() # verify the output is close enough to theoretical value np.allclose(prob, np.ones(len(prob)) * 1/ 6, atol=0.05) . True . An example of probabilty distributions of 2 discrete random variables . Joint Probability . P(X=x, Y=y) What is the probabilty of throwing a dice and getting 1 and tossing a coin and getting head or tail . Conditional Probability . P(X=x | Y=y) What is the probability of throwing a dice and getting 1 given that tossing a coing resulted in a head . Marginal Probability . P(X=x) What is the probabilty of throwing a dice a getting 1 probabilty distribution of subset of variables . Uniform Distribution . Each value us qually likely to occur. In other words, the probabilty of each value is equal . import seaborn as sns # An example of uniform continuous distribution x = np.random.uniform(0, 0.5, 10000) sns.distplot(x) plt.show() . /usr/local/lib/python3.9/site-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) . Continuous Variables . np.random.seed(123) # draw 1000 values from a normal distribution with mean=0 and std=1 # drawing values implies that the output values will always satisfy the constrains of the normal distribution # these constrains in this case are when we find their mean, it will be 0 and their standard deviation will # be 1 x = np.random.normal(0, 1, 1000) x.shape . (1000,) . x.mean() . -0.03956413608079184 . x.std() # nice ! . 1.0007875375162334 . np.random.seed(123) x = np.random.normal(0, 1, 1000) y = np.random.normal(0, 1, 1000) sns.distplot(x) plt.title(&#39;x&#39;) plt.xlim(-4, 4) plt.show() sns.distplot(y) plt.title(&#39;y&#39;) plt.xlim(-4, 4) plt.show() . /usr/local/lib/python3.9/site-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) . /usr/local/lib/python3.9/site-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) . NOTE: the y-axis here represents the probaility density and the x-axis is the continuous values . Conditional Events can be of 2 types . Dependent Events: Drawing 2 cards from the same deck without replacement. . | Independent Events: One event does not affect the other such as, Throwing a dice and tossing a coin . | .",
            "url": "https://deepsworld.github.io/blog/probability/2022/08/06/Probability-Notes.html",
            "relUrl": "/probability/2022/08/06/Probability-Notes.html",
            "date": " • Aug 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Matrices Notes",
            "content": "import numpy as np &#39;&#39;&#39; 3x - y = 7 2x + y = 8 - 5x = 15 x = 3; y = 2 &#39;&#39;&#39; mat = np.array([[3, -1], [2, 1]]) # 2 x 2 rhs = np.array([[7, 8]]) # 1 x 2 out = np.linalg.inv(mat) @ rhs.transpose() # (2 x 2) @ (1 x 2).T out . array([[3.], [2.]]) . I = np.eye(3, 3) I . array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]) . &#39;&#39;&#39; Ainv @ A = I &#39;&#39;&#39; mat = np.random.rand(2, 2) I = np.linalg.inv(mat) @ mat I . array([[1.00000000e+00, 3.32227679e-16], [3.47665962e-18, 1.00000000e+00]]) . NOTE: The output matrix does not look exactly what we expect, this is because of the limitation of floating point precision and for practical purposes e-16 can be considered as zero or very close to zero . singular = np.array([[1, 0], [0, 0]]) singular . array([[1, 0], [0, 0]]) . try: np.linalg.inv(singular) except Exception as e: print(f&#39;Cannot find inverse because: {e}&#39;) . Cannot find inverse because: Singular matrix . det_singular = np.linalg.det(singular) det_singular . 0.0 .",
            "url": "https://deepsworld.github.io/blog/linear_algebra/2022/08/06/Matrices-Notes.html",
            "relUrl": "/linear_algebra/2022/08/06/Matrices-Notes.html",
            "date": " • Aug 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://deepsworld.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://deepsworld.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}